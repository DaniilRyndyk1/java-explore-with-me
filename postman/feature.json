{
	"info": {
		"_postman_id": "50f4cb57-de23-4f0f-aabe-71919a706625",
		"name": "Comment Feature",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "20098361"
	},
	"item": [
		{
			"name": "Добавление пользователя 1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"const source = JSON.parse(pm.request.body.raw);\r",
							"const target = pm.response.json();\r",
							"\r",
							"pm.test(\"Пользователь должен содержать поля: id, name, email\", function () {\r",
							"pm.expect(target).to.have.property('id');\r",
							"pm.expect(target).to.have.property('name');\r",
							"pm.expect(target).to.have.property('email');\r",
							"});\r",
							"\r",
							"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
							"    pm.expect(target.id).to.not.be.null;\r",
							"    pm.expect(source.name).equal(target.name, 'Имя пользователя должно соответствовать отправленному в запросе');\r",
							"    pm.expect(source.email).equal(target.email, 'Почта пользователя должна соответствовать отправленной в запросе');\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\":\"derekzuu\",\r\n    \"email\":\"Derek8@hotmail.com\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8080/admin/users",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"admin",
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "Добавление пользователя 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"const source = JSON.parse(pm.request.body.raw);\r",
							"const target = pm.response.json();\r",
							"\r",
							"pm.test(\"Пользователь должен содержать поля: id, name, email\", function () {\r",
							"pm.expect(target).to.have.property('id');\r",
							"pm.expect(target).to.have.property('name');\r",
							"pm.expect(target).to.have.property('email');\r",
							"});\r",
							"\r",
							"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
							"    pm.expect(target.id).to.not.be.null;\r",
							"    pm.expect(source.name).equal(target.name, 'Имя пользователя должно соответствовать отправленному в запросе');\r",
							"    pm.expect(source.email).equal(target.email, 'Почта пользователя должна соответствовать отправленной в запросе');\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\":\"zoolander\",\r\n    \"email\":\"zoolander@yandex.com\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8080/admin/users",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"admin",
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "Добавление категории 1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"const source = JSON.parse(pm.request.body.raw);\r",
							"const target = pm.response.json();\r",
							"\r",
							"pm.test(\"Категория должна содержать поля: id, name\", function () {\r",
							"pm.expect(target).to.have.property('id');\r",
							"pm.expect(target).to.have.property('name');\r",
							"});\r",
							"\r",
							"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
							"    pm.expect(target.id).to.not.be.null;\r",
							"    pm.expect(source.name).equal(target.name, 'Название категории должно совпадать с отправленным');\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\":\"Moscow Events\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8080/admin/categories",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"admin",
						"categories"
					]
				}
			},
			"response": []
		},
		{
			"name": "Добавление события 1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
							"    pm.response.to.have.status(201);  \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"const source = JSON.parse(pm.request.body.raw);\r",
							"const target = pm.response.json();\r",
							"\r",
							"pm.test(\"Событие должно содержать поля: id, title, annotation, category, paid, eventDate, initiator, description, participantLimit, state, createdOn, location, requestModeration\", function () {\r",
							"pm.expect(target).to.have.property('id');\r",
							"pm.expect(target).to.have.property('title');\r",
							"pm.expect(target).to.have.property('annotation');\r",
							"pm.expect(target).to.have.property('category');\r",
							"pm.expect(target).to.have.property('paid');\r",
							"pm.expect(target).to.have.property('eventDate');\r",
							"pm.expect(target).to.have.property('initiator');\r",
							"pm.expect(target).to.have.property('description');\r",
							"pm.expect(target).to.have.property('participantLimit');\r",
							"pm.expect(target).to.have.property('state');\r",
							"pm.expect(target).to.have.property('createdOn');\r",
							"pm.expect(target).to.have.property('location');\r",
							"pm.expect(target).to.have.property('requestModeration');\r",
							"});\r",
							"\r",
							"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
							"    pm.expect(target.id).to.not.be.null;\r",
							"    pm.expect(target.title).equal(source.title, 'Название события должно соответствовать названию события в запросе');\r",
							"    pm.expect(target.annotation).equal(source.annotation, 'Аннотация события должна соответствовать аннотации события в запросе');\r",
							"    pm.expect(target.paid.toString()).equal(source.paid.toString(), 'Стоимость события должна соответствовать стоимости события в запросе');\r",
							"    pm.expect(target.eventDate).equal(source.eventDate, 'Дата проведения события должна соответствовать дате проведения события в запросе');\r",
							"    pm.expect(target.description).equal(source.description, 'Описание события должно соответствовать описание события в запросе');\r",
							"    pm.expect(target.participantLimit.toString()).equal(source.participantLimit.toString(), 'Лимит участников события должно соответствовать лимиту участников события в запросе');\r",
							"    pm.expect(target.location.lat.toString()).equal(source.location.lat.toString(), 'Широта локации проведения события должна соответствовать широте локации проведения события в запросе');\r",
							"    pm.expect(target.location.lon.toString()).equal(source.location.lon.toString(), 'Долгота локации проведения события должна соответствовать долготе локации проведения события в запросе');\r",
							"    pm.expect(target.requestModeration.toString()).equal(source.requestModeration.toString(), 'Необходимость модерации события должна соответствовать необходимости модерации события в запросе');\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\"annotation\":\"Rerum cum minima nobis et illum. Nihil voluptatem libero eos eum aut harum hic. Iure architecto et qui eos ex praesentium velit. Expedita voluptatem necessitatibus delectus aut quaerat et quae.\",\"category\":1,\"description\":\"Ut et sit eaque corrupti aut voluptatem dolores nulla. Quidem officia aliquam exercitationem voluptas explicabo iste reiciendis similique. Maiores est corporis reiciendis est similique.\\n \\rCulpa qui eaque enim nesciunt corrupti natus. Fuga aut et quibusdam est quae modi cumque ipsam eligendi. Et et rerum tempore aut alias harum.\\n \\rEum repellendus voluptas cupiditate tempora quia. Cupiditate provident asperiores non et. Neque doloribus provident. Ut fugiat est. Debitis sit ad. Praesentium rerum quibusdam architecto quia dolorum dolorem ratione accusamus.\",\"eventDate\":\"2023-09-20 19:25:55\",\"location\":{\"lat\":43.0765,\"lon\":-144.4165},\"paid\":\"false\",\"participantLimit\":\"641\",\"requestModeration\":\"true\",\"title\":\"Suscipit nisi eum.\"}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8080/users/1/events",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"users",
						"1",
						"events"
					]
				}
			},
			"response": []
		},
		{
			"name": "Публикация события администратором",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
							"    pm.response.to.be.ok;    \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"const source = pm.collectionVariables.get(\"response\");\r",
							"const target = pm.response.json();\r",
							"\r",
							"\r",
							"pm.test(\"Событие должно содержать поля: id, title, annotation, category, paid, eventDate, initiator, description, participantLimit, state, createdOn, location, requestModeration\", function () {\r",
							"pm.expect(target).to.have.property('id');\r",
							"pm.expect(target).to.have.property('title');\r",
							"pm.expect(target).to.have.property('annotation');\r",
							"pm.expect(target).to.have.property('category');\r",
							"pm.expect(target).to.have.property('paid');\r",
							"pm.expect(target).to.have.property('eventDate');\r",
							"pm.expect(target).to.have.property('initiator');\r",
							"pm.expect(target).to.have.property('description');\r",
							"pm.expect(target).to.have.property('participantLimit');\r",
							"pm.expect(target).to.have.property('state');\r",
							"pm.expect(target).to.have.property('createdOn');\r",
							"pm.expect(target).to.have.property('location');\r",
							"pm.expect(target).to.have.property('requestModeration');\r",
							"});\r",
							"\r",
							"pm.test(\"Событие должно иметь статус PUBLISHED\",function () {\r",
							"    pm.expect(target.state).equal(\"PUBLISHED\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"stateAction\":\"PUBLISH_EVENT\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8080/admin/events/1",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"admin",
						"events",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "Получение события 1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Ответ должен содержать код статуса 200 и данные в формате json', function () {\r",
							"    pm.response.to.be.ok;\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"})\r",
							"\r",
							"const target = pm.response.json();\r",
							"\r",
							"pm.test(\"Событие должно содержать поля: id, title, annotation, category, paid, eventDate\", function () {\r",
							"    pm.expect(target).to.have.property('id');\r",
							"    pm.expect(target).to.have.property('title');\r",
							"    pm.expect(target).to.have.property('annotation');\r",
							"    pm.expect(target).to.have.property('category');\r",
							"    pm.expect(target).to.have.property('paid');\r",
							"    pm.expect(target).to.have.property('eventDate');\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:8080/events/1",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"events",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "Добавления комментария к событию 1 от пользователя 1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"const target = pm.response.json();\r",
							"\r",
							"pm.test(\"Комментарий должен содержать поля: id, event, user, text, rating, status\", function () {\r",
							"pm.expect(target).to.have.property('id');\r",
							"pm.expect(target).to.have.property('event');\r",
							"pm.expect(target).to.have.property('user');\r",
							"pm.expect(target).to.have.property('text');\r",
							"pm.expect(target).to.have.property('rating');\r",
							"pm.expect(target).to.have.property('status');\r",
							"});\r",
							"\r",
							"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
							"    pm.expect(target.id).to.not.be.null;\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"text\": \"SUPER\",\r\n    \"rating\": 5\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8080/events/1/comments/1",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"events",
						"1",
						"comments",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "Повторное добавления комментария к событию 1 от пользователя 1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 409 и данные в формате json\", function () {\r",
							"    pm.response.to.have.status(409); \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"text\": \"SUPER\",\r\n    \"rating\": 5\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8080/events/1/comments/1",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"events",
						"1",
						"comments",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "Получение комментария к событию 1 от пользователя 1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Ответ должен содержать код статуса 200 и данные в формате json', function () {\r",
							"    pm.response.to.be.ok;\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"})\r",
							"\r",
							"const target = pm.response.json();\r",
							"\r",
							"pm.test(\"Комментарий должно содержать поля: id, event, user, text, rating, status\", function () {\r",
							"pm.expect(target).to.have.property('id');\r",
							"pm.expect(target).to.have.property('event');\r",
							"pm.expect(target).to.have.property('user');\r",
							"pm.expect(target).to.have.property('text');\r",
							"pm.expect(target).to.have.property('rating');\r",
							"pm.expect(target).to.have.property('status');\r",
							"});\r",
							"\r",
							"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
							"    pm.expect(target.id).to.not.be.null;\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:8080/users/1/comments/1",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"users",
						"1",
						"comments",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "Добавления комментария к событию 1 от пользователя 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"const target = pm.response.json();\r",
							"\r",
							"pm.test(\"Комментарий должен содержать поля: id, event, user, text, rating, status\", function () {\r",
							"pm.expect(target).to.have.property('id');\r",
							"pm.expect(target).to.have.property('event');\r",
							"pm.expect(target).to.have.property('user');\r",
							"pm.expect(target).to.have.property('text');\r",
							"pm.expect(target).to.have.property('rating');\r",
							"pm.expect(target).to.have.property('status');\r",
							"});\r",
							"\r",
							"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
							"    pm.expect(target.id).to.not.be.null;\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"text\": \"SUPER\",\r\n    \"rating\": 5\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8080/events/1/comments/2",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"events",
						"1",
						"comments",
						"2"
					]
				}
			},
			"response": []
		},
		{
			"name": "Получение комментариев к событию 1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Ответ должен содержать код статуса 200 и данные в формате json', function () {\r",
							"    pm.response.to.be.ok;\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"})\r",
							"\r",
							"const json = pm.response.json();\r",
							"const target = json[0];\r",
							"\r",
							"pm.test(\"Комментарий должно содержать поля: id, event, user, text, rating, status\", function () {\r",
							"pm.expect(target).to.have.property('id');\r",
							"pm.expect(target).to.have.property('event');\r",
							"pm.expect(target).to.have.property('user');\r",
							"pm.expect(target).to.have.property('text');\r",
							"pm.expect(target).to.have.property('rating');\r",
							"pm.expect(target).to.have.property('status');\r",
							"});\r",
							"\r",
							"pm.test(\"Должно быть получено несколько комментариев\", function () {\r",
							"    pm.expect(json.length).equal(2)\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:8080/events/1/comments",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"events",
						"1",
						"comments"
					]
				}
			},
			"response": []
		},
		{
			"name": "Получение комментария к событию 1 от пользователя 3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Ответ должен содержать код статуса 404 и данные в формате json', function () {\r",
							"    pm.response.to.be.notFound;\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"})\r",
							"\r",
							"const target = pm.response.json();\r",
							"\r",
							"pm.test(\"Ошибка должна содержать поля: message, reason, status, timestamp\", function () {\r",
							"pm.expect(target).to.have.property('message');\r",
							"pm.expect(target).to.have.property('reason');\r",
							"pm.expect(target).to.have.property('status');\r",
							"pm.expect(target).to.have.property('timestamp');\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:8080/users/3/comments/1",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"users",
						"3",
						"comments",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "Получение комментария к событию 2 от пользователя 1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Ответ должен содержать код статуса 404 и данные в формате json', function () {\r",
							"    pm.response.to.be.notFound;\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"})\r",
							"\r",
							"const target = pm.response.json();\r",
							"\r",
							"pm.test(\"Ошибка должна содержать поля: message, reason, status, timestamp\", function () {\r",
							"pm.expect(target).to.have.property('message');\r",
							"pm.expect(target).to.have.property('reason');\r",
							"pm.expect(target).to.have.property('status');\r",
							"pm.expect(target).to.have.property('timestamp');\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:8080/users/1/comments/2",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"users",
						"1",
						"comments",
						"2"
					]
				}
			},
			"response": []
		},
		{
			"name": "Отклонения комментария к событию 1 от пользователя 1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
							"    pm.response.to.be.ok;    \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"const target = pm.response.json();\r",
							"\r",
							"pm.test(\"Комментарий должен содержать поля: id, event, user, text, rating, status\", function () {\r",
							"pm.expect(target).to.have.property('id');\r",
							"pm.expect(target).to.have.property('event');\r",
							"pm.expect(target).to.have.property('user');\r",
							"pm.expect(target).to.have.property('text');\r",
							"pm.expect(target).to.have.property('rating');\r",
							"pm.expect(target).to.have.property('status');\r",
							"});\r",
							"\r",
							"pm.test(\"Комментарий должен иметь статус REJECTED\",function () {\r",
							"    pm.expect(target.status).equal(\"REJECTED\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"newStatus\":\"REJECTED\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8080/admin/events/1/comments/1",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"admin",
						"events",
						"1",
						"comments",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "Получение комментария к событию 1 от пользователя 1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Ответ должен содержать код статуса 404 и данные в формате json', function () {\r",
							"    pm.response.to.be.notFound;\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"})\r",
							"\r",
							"const target = pm.response.json();\r",
							"\r",
							"pm.test(\"Ошибка должна содержать поля: message, reason, status, timestamp\", function () {\r",
							"pm.expect(target).to.have.property('message');\r",
							"pm.expect(target).to.have.property('reason');\r",
							"pm.expect(target).to.have.property('status');\r",
							"pm.expect(target).to.have.property('timestamp');\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:8080/users/1/comments/1",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"users",
						"1",
						"comments",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "Добавление события 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
							"    pm.response.to.have.status(201);  \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"const source = JSON.parse(pm.request.body.raw);\r",
							"const target = pm.response.json();\r",
							"\r",
							"pm.test(\"Событие должно содержать поля: id, title, annotation, category, paid, eventDate, initiator, description, participantLimit, state, createdOn, location, requestModeration\", function () {\r",
							"pm.expect(target).to.have.property('id');\r",
							"pm.expect(target).to.have.property('title');\r",
							"pm.expect(target).to.have.property('annotation');\r",
							"pm.expect(target).to.have.property('category');\r",
							"pm.expect(target).to.have.property('paid');\r",
							"pm.expect(target).to.have.property('eventDate');\r",
							"pm.expect(target).to.have.property('initiator');\r",
							"pm.expect(target).to.have.property('description');\r",
							"pm.expect(target).to.have.property('participantLimit');\r",
							"pm.expect(target).to.have.property('state');\r",
							"pm.expect(target).to.have.property('createdOn');\r",
							"pm.expect(target).to.have.property('location');\r",
							"pm.expect(target).to.have.property('requestModeration');\r",
							"});\r",
							"\r",
							"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
							"    pm.expect(target.id).to.not.be.null;\r",
							"    pm.expect(target.title).equal(source.title, 'Название события должно соответствовать названию события в запросе');\r",
							"    pm.expect(target.annotation).equal(source.annotation, 'Аннотация события должна соответствовать аннотации события в запросе');\r",
							"    pm.expect(target.paid.toString()).equal(source.paid.toString(), 'Стоимость события должна соответствовать стоимости события в запросе');\r",
							"    pm.expect(target.eventDate).equal(source.eventDate, 'Дата проведения события должна соответствовать дате проведения события в запросе');\r",
							"    pm.expect(target.description).equal(source.description, 'Описание события должно соответствовать описание события в запросе');\r",
							"    pm.expect(target.participantLimit.toString()).equal(source.participantLimit.toString(), 'Лимит участников события должно соответствовать лимиту участников события в запросе');\r",
							"    pm.expect(target.location.lat.toString()).equal(source.location.lat.toString(), 'Широта локации проведения события должна соответствовать широте локации проведения события в запросе');\r",
							"    pm.expect(target.location.lon.toString()).equal(source.location.lon.toString(), 'Долгота локации проведения события должна соответствовать долготе локации проведения события в запросе');\r",
							"    pm.expect(target.requestModeration.toString()).equal(source.requestModeration.toString(), 'Необходимость модерации события должна соответствовать необходимости модерации события в запросе');\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\"annotation\":\"Rerum cum minima nobis et illum. Nihil voluptatem libero eos eum aut harum hic. Iure architecto et qui eos ex praesentium velit. Expedita voluptatem necessitatibus delectus aut quaerat et quae.\",\"category\":1,\"description\":\"Ut et sit eaque corrupti aut voluptatem dolores nulla. Quidem officia aliquam exercitationem voluptas explicabo iste reiciendis similique. Maiores est corporis reiciendis est similique.\\n \\rCulpa qui eaque enim nesciunt corrupti natus. Fuga aut et quibusdam est quae modi cumque ipsam eligendi. Et et rerum tempore aut alias harum.\\n \\rEum repellendus voluptas cupiditate tempora quia. Cupiditate provident asperiores non et. Neque doloribus provident. Ut fugiat est. Debitis sit ad. Praesentium rerum quibusdam architecto quia dolorum dolorem ratione accusamus.\",\"eventDate\":\"2023-09-20 19:25:55\",\"location\":{\"lat\":43.0765,\"lon\":-144.4165},\"paid\":\"false\",\"participantLimit\":\"641\",\"requestModeration\":\"true\",\"title\":\"Suscipit nisi eum.\"}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8080/users/2/events",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"users",
						"2",
						"events"
					]
				}
			},
			"response": []
		},
		{
			"name": "Добавление события 3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
							"    pm.response.to.have.status(201);  \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"const source = JSON.parse(pm.request.body.raw);\r",
							"const target = pm.response.json();\r",
							"\r",
							"pm.test(\"Событие должно содержать поля: id, title, annotation, category, paid, eventDate, initiator, description, participantLimit, state, createdOn, location, requestModeration\", function () {\r",
							"pm.expect(target).to.have.property('id');\r",
							"pm.expect(target).to.have.property('title');\r",
							"pm.expect(target).to.have.property('annotation');\r",
							"pm.expect(target).to.have.property('category');\r",
							"pm.expect(target).to.have.property('paid');\r",
							"pm.expect(target).to.have.property('eventDate');\r",
							"pm.expect(target).to.have.property('initiator');\r",
							"pm.expect(target).to.have.property('description');\r",
							"pm.expect(target).to.have.property('participantLimit');\r",
							"pm.expect(target).to.have.property('state');\r",
							"pm.expect(target).to.have.property('createdOn');\r",
							"pm.expect(target).to.have.property('location');\r",
							"pm.expect(target).to.have.property('requestModeration');\r",
							"});\r",
							"\r",
							"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
							"    pm.expect(target.id).to.not.be.null;\r",
							"    pm.expect(target.title).equal(source.title, 'Название события должно соответствовать названию события в запросе');\r",
							"    pm.expect(target.annotation).equal(source.annotation, 'Аннотация события должна соответствовать аннотации события в запросе');\r",
							"    pm.expect(target.paid.toString()).equal(source.paid.toString(), 'Стоимость события должна соответствовать стоимости события в запросе');\r",
							"    pm.expect(target.eventDate).equal(source.eventDate, 'Дата проведения события должна соответствовать дате проведения события в запросе');\r",
							"    pm.expect(target.description).equal(source.description, 'Описание события должно соответствовать описание события в запросе');\r",
							"    pm.expect(target.participantLimit.toString()).equal(source.participantLimit.toString(), 'Лимит участников события должно соответствовать лимиту участников события в запросе');\r",
							"    pm.expect(target.location.lat.toString()).equal(source.location.lat.toString(), 'Широта локации проведения события должна соответствовать широте локации проведения события в запросе');\r",
							"    pm.expect(target.location.lon.toString()).equal(source.location.lon.toString(), 'Долгота локации проведения события должна соответствовать долготе локации проведения события в запросе');\r",
							"    pm.expect(target.requestModeration.toString()).equal(source.requestModeration.toString(), 'Необходимость модерации события должна соответствовать необходимости модерации события в запросе');\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\"annotation\":\"Rerum cum minima nobis et illum. Nihil voluptatem libero eos eum aut harum hic. Iure architecto et qui eos ex praesentium velit. Expedita voluptatem necessitatibus delectus aut quaerat et quae.\",\"category\":1,\"description\":\"Ut et sit eaque corrupti aut voluptatem dolores nulla. Quidem officia aliquam exercitationem voluptas explicabo iste reiciendis similique. Maiores est corporis reiciendis est similique.\\n \\rCulpa qui eaque enim nesciunt corrupti natus. Fuga aut et quibusdam est quae modi cumque ipsam eligendi. Et et rerum tempore aut alias harum.\\n \\rEum repellendus voluptas cupiditate tempora quia. Cupiditate provident asperiores non et. Neque doloribus provident. Ut fugiat est. Debitis sit ad. Praesentium rerum quibusdam architecto quia dolorum dolorem ratione accusamus.\",\"eventDate\":\"2023-09-20 19:25:55\",\"location\":{\"lat\":43.0765,\"lon\":-144.4165},\"paid\":\"false\",\"participantLimit\":\"641\",\"requestModeration\":\"true\",\"title\":\"Suscipit nisi eum.\"}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8080/users/2/events",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"users",
						"2",
						"events"
					]
				}
			},
			"response": []
		},
		{
			"name": "Добавления комментария к событию 2 от пользователя 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"const target = pm.response.json();\r",
							"\r",
							"pm.test(\"Комментарий должен содержать поля: id, event, user, text, rating, status\", function () {\r",
							"pm.expect(target).to.have.property('id');\r",
							"pm.expect(target).to.have.property('event');\r",
							"pm.expect(target).to.have.property('user');\r",
							"pm.expect(target).to.have.property('text');\r",
							"pm.expect(target).to.have.property('rating');\r",
							"pm.expect(target).to.have.property('status');\r",
							"});\r",
							"\r",
							"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
							"    pm.expect(target.id).to.not.be.null;\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"text\": \"SUPER\",\r\n    \"rating\": 5\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8080/events/2/comments/2",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"events",
						"2",
						"comments",
						"2"
					]
				}
			},
			"response": []
		},
		{
			"name": "Добавления комментария к событию 3 от пользователя 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"const target = pm.response.json();\r",
							"\r",
							"pm.test(\"Комментарий должен содержать поля: id, event, user, text, rating, status\", function () {\r",
							"pm.expect(target).to.have.property('id');\r",
							"pm.expect(target).to.have.property('event');\r",
							"pm.expect(target).to.have.property('user');\r",
							"pm.expect(target).to.have.property('text');\r",
							"pm.expect(target).to.have.property('rating');\r",
							"pm.expect(target).to.have.property('status');\r",
							"});\r",
							"\r",
							"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
							"    pm.expect(target.id).to.not.be.null;\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"text\": \"SUPER\",\r\n    \"rating\": 5\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8080/events/3/comments/2",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"events",
						"3",
						"comments",
						"2"
					]
				}
			},
			"response": []
		},
		{
			"name": "Получение комментариев по пользователю 1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Ответ должен содержать код статуса 200 и данные в формате json', function () {\r",
							"    pm.response.to.be.ok;\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"})\r",
							"\r",
							"const json = pm.response.json();\r",
							"const target = json[0];\r",
							"\r",
							"pm.test(\"Комментарий должно содержать поля: id, event, user, text, rating, status\", function () {\r",
							"pm.expect(target).to.have.property('id');\r",
							"pm.expect(target).to.have.property('event');\r",
							"pm.expect(target).to.have.property('user');\r",
							"pm.expect(target).to.have.property('text');\r",
							"pm.expect(target).to.have.property('rating');\r",
							"pm.expect(target).to.have.property('status');\r",
							"});\r",
							"\r",
							"pm.test(\"Должно быть получено несколько комментариев\", function () {\r",
							"    pm.expect(json.length).equal(3)\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:8080/users/2/comments",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"users",
						"2",
						"comments"
					]
				}
			},
			"response": []
		},
		{
			"name": "Удаление комментария к событию 3 до пользователя 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Ответ должен содержать код статуса 204 и данные в формате json', function () {\r",
							"    pm.response.to.have.status(204);\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "http://localhost:8080/events/3/comments/2",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"events",
						"3",
						"comments",
						"2"
					]
				}
			},
			"response": []
		},
		{
			"name": "Подтверждение комментария к событию 2 от пользователя 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
							"    pm.response.to.be.ok;    \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"const target = pm.response.json();\r",
							"\r",
							"pm.test(\"Комментарий должен содержать поля: id, event, user, text, rating, status\", function () {\r",
							"pm.expect(target).to.have.property('id');\r",
							"pm.expect(target).to.have.property('event');\r",
							"pm.expect(target).to.have.property('user');\r",
							"pm.expect(target).to.have.property('text');\r",
							"pm.expect(target).to.have.property('rating');\r",
							"pm.expect(target).to.have.property('status');\r",
							"});\r",
							"\r",
							"pm.test(\"Комментарий должен иметь статус CONFIRMED\",function () {\r",
							"    pm.expect(target.status).equal(\"CONFIRMED\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"newStatus\":\"CONFIRMED\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8080/admin/events/2/comments/2",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"admin",
						"events",
						"2",
						"comments",
						"2"
					]
				}
			},
			"response": []
		},
		{
			"name": "Удаление комментария к событию 2 от пользователя 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Ответ должен содержать код статуса 404 и данные в формате json', function () {\r",
							"    pm.response.to.have.status(409);\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"})\r",
							"\r",
							"const target = pm.response.json();\r",
							"\r",
							"pm.test(\"Ошибка должна содержать поля: message, reason, status, timestamp\", function () {\r",
							"pm.expect(target).to.have.property('message');\r",
							"pm.expect(target).to.have.property('reason');\r",
							"pm.expect(target).to.have.property('status');\r",
							"pm.expect(target).to.have.property('timestamp');\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "http://localhost:8080/events/2/comments/2",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"events",
						"2",
						"comments",
						"2"
					]
				}
			},
			"response": []
		},
		{
			"name": "Обновление комментария к событию 2 от пользователя 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
							"    pm.response.to.be.ok;    \r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"const target = pm.response.json();\r",
							"\r",
							"pm.test(\"Комментарий должен содержать поля: id, event, user, text, rating, status\", function () {\r",
							"pm.expect(target).to.have.property('id');\r",
							"pm.expect(target).to.have.property('event');\r",
							"pm.expect(target).to.have.property('user');\r",
							"pm.expect(target).to.have.property('text');\r",
							"pm.expect(target).to.have.property('rating');\r",
							"pm.expect(target).to.have.property('status');\r",
							"});\r",
							"\r",
							"pm.test(\"Комментарий должен иметь статус PENDING\",function () {\r",
							"    pm.expect(target.status).equal(\"PENDING\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"text\":\"BAD\",\r\n    \"rating\": 1\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8080/events/2/comments/2",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"events",
						"2",
						"comments",
						"2"
					]
				}
			},
			"response": []
		},
		{
			"name": "Удаление комментария к событию 2 от пользователя 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Ответ должен содержать код статуса 204 и данные в формате json', function () {\r",
							"    pm.response.to.have.status(204);\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "http://localhost:8080/events/2/comments/2",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"events",
						"2",
						"comments",
						"2"
					]
				}
			},
			"response": []
		},
		{
			"name": "Получение комментариев пользователя 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Ответ должен содержать код статуса 200 и данные в формате json', function () {\r",
							"    pm.response.to.be.ok;\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"})\r",
							"\r",
							"const json = pm.response.json();\r",
							"const target = json[0];\r",
							"\r",
							"pm.test(\"Комментарий должен содержать поля: id, event, user, text, rating, status\", function () {\r",
							"pm.expect(target).to.have.property('id');\r",
							"pm.expect(target).to.have.property('event');\r",
							"pm.expect(target).to.have.property('user');\r",
							"pm.expect(target).to.have.property('text');\r",
							"pm.expect(target).to.have.property('rating');\r",
							"pm.expect(target).to.have.property('status');\r",
							"});\r",
							"\r",
							"pm.test(\"Должен быть получен один комментарий\", function () {\r",
							"    pm.expect(json.length).equal(1)\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:8080/users/2/comments",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"users",
						"2",
						"comments"
					]
				}
			},
			"response": []
		}
	]
}